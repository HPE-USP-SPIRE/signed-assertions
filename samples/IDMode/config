#!/bin/bash

set -e

##  This script automatically pre-configure the application changing the IP address and OKTA credentials where is necessary.
##  The configuration file can be found in ./utils/.cfg.

## Might require use of dos2unix on ./utils/.cfg to reconfigure
## the Carriage Return character to UNIX to avoid misconfiguration.

# sudo apt install dos2unix -y
# dos2unix config

##################
# OKTA
CLIENT_ID=
CLIENT_SECRET=
ISSUER=
# Application
SOCKET_PATH=
TRUST_DOMAIN=
PEM_PATH=
PROOF_LEN=
MINT_ZKP=
ADD_ZKP=
# IP/Port
HOST_IP=
ASSERTING_PORT=
TARGET_PORT=
MIDDLE_TIER1_PORT=
MIDDLE_TIER2_PORT=
MIDDLE_TIER3_PORT=
MIDDLE_TIER4_PORT=
MIDDLE_TIER5_PORT=
##################

## Read config file and copy data to variables
cp_data_config(){
while IFS= read -r LINE
do
  if grep -q "CLIENT_ID" <<< "$LINE"; then
    CLIENT_ID=${LINE#*=}
  elif grep -q "CLIENT_SECRET" <<< "$LINE"; then
    CLIENT_SECRET=${LINE#*=}
  elif grep -q "ISSUER" <<< "$LINE"; then
    ISSUER=${LINE#*=}

  elif grep -q "SOCKET_PATH" <<< "$LINE"; then
    SOCKET_PATH=${LINE#*=}
  elif grep -q "TRUST_DOMAIN" <<< "$LINE"; then
    TRUST_DOMAIN=${LINE#*=}
  elif grep -q "PEM_PATH" <<< "$LINE"; then
    PEM_PATH=${LINE#*=}    
  elif grep -q "PROOF_LEN" <<< "$LINE"; then
    PROOF_LEN=${LINE#*=}
  elif grep -q "MINT_ZKP=" <<< "$LINE"; then
    MINT_ZKP=${LINE#*=}
  elif grep -q "ADD_ZKP" <<< "$LINE"; then
    ADD_ZKP=${LINE#*=}            
  
  elif grep -q "HOST_IP" <<< "$LINE"; then
    HOST_IP=${LINE#*=}
  elif grep -q "ASSERTING_PORT" <<< "$LINE"; then
    ASSERTING_PORT=${LINE#*=}
  elif grep -q "TARGET_PORT" <<< "$LINE"; then
    TARGET_PORT=${LINE#*=}
  elif grep -q "MIDDLE-TIER1_PORT" <<< "$LINE"; then
    MIDDLE_TIER1_PORT=${LINE#*=}
  elif grep -q "MIDDLE-TIER2_PORT" <<< "$LINE"; then
    MIDDLE_TIER2_PORT=${LINE#*=}
  elif grep -q "MIDDLE-TIER3_PORT" <<< "$LINE"; then
    MIDDLE_TIER3_PORT=${LINE#*=}
  elif grep -q "MIDDLE-TIER4_PORT" <<< "$LINE"; then
    MIDDLE_TIER4_PORT=${LINE#*=}
  elif grep -q "MIDDLE-TIER5_PORT" <<< "$LINE"; then
    MIDDLE_TIER5_PORT=${LINE#*=}
  else
    continue
  fi
done < "./utils/.cfg"
}
cp_data_config

## \/ Change .cfg file of Subject Workload
CFG_PATH="./subject_workload/.cfg"

LINE_MATCH=$(awk '/CLIENT_ID=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="CLIENT_ID=${CLIENT_ID}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"CLIENT_ID=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/CLIENT_SECRET=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="CLIENT_SECRET=${CLIENT_SECRET}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"CLIENT_SECRET=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/ISSUER=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="ISSUER=${ISSUER}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"ISSUER=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/SOCKET_PATH=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="SOCKET_PATH=${SOCKET_PATH}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"SOCKET_PATH=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MINT_ZKP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="MINT_ZKP=${MINT_ZKP}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"MINT_ZKP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/PROOF_LEN=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="PROOF_LEN=${PROOF_LEN}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"PROOF_LEN=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/PEM_PATH=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="PEM_PATH=${PEM_PATH}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"PEM_PATH=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/TRUST_DOMAIN=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="TRUST_DOMAIN=${TRUST_DOMAIN}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"TRUST_DOMAIN=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/HOSTIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  SUBJECTIP="HOSTIP=${HOST_IP}:8080"
  sudo sed -i "$LINE_MATCH c \\$SUBJECTIP" $CFG_PATH
else
  trap "\"HOSTIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/ASSERTINGWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  ASSERTINGWLIP="ASSERTINGWLIP=${HOST_IP}:${ASSERTING_PORT}"
  sudo sed -i "$LINE_MATCH c \\$ASSERTINGWLIP" $CFG_PATH
else
  trap "\"ASSERTINGWLIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/TARGETWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TARGETWLIP="TARGETWLIP=${HOST_IP}:${TARGET_PORT}"
  sudo sed -i "$LINE_MATCH c \\$TARGETWLIP" $CFG_PATH
else
  trap "\"TARGETWLIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MIDDLETIERIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  MIDDLETIERIP="MIDDLETIERIP=${HOST_IP}:${MIDDLE_TIER1_PORT}"
  sudo sed -i "$LINE_MATCH c \\$MIDDLETIERIP" $CFG_PATH
else
  trap "\"MIDDLETIERIP=\" string not found in .cfg file." EXIT
fi

# /\Change .cfg file of Subject Workload

########################################

## \/Change .cfg file of Asserting Workload
CFG_PATH="./Assertingwl-mTLS/.cfg"

LINE_MATCH=$(awk '/ADD_ZKP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="ADD_ZKP=${ADD_ZKP}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"ADD_ZKP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MINT_ZKP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="MINT_ZKP=${MINT_ZKP}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"MINT_ZKP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/PEM_PATH=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="PEM_PATH=${PEM_PATH}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"PEM_PATH=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/PROOF_LEN=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="PROOF_LEN=${PROOF_LEN}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"PROOF_LEN=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/SOCKET_PATH=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="SOCKET_PATH=${SOCKET_PATH}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"SOCKET_PATH=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/TRUST_DOMAIN=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="TRUST_DOMAIN=${TRUST_DOMAIN}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"TRUST_DOMAIN=\" string not found in .cfg file." EXIT
fi

# /\Change .cfg file of Asserting Workload

#######################################

#\/ Change .cfg file of Middle-Tier Workload (currently 5 tiers)

### Middle-tier 1
CFG_PATH="./middle-tier/.cfg"
LINE_MATCH=$(awk '/ASSERTINGWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  ASSERTINGWLIP="ASSERTINGWLIP=${HOST_IP}:${ASSERTING_PORT}"
  sudo sed -i "$LINE_MATCH c \\$ASSERTINGWLIP" $CFG_PATH
else
  trap "\"ASSERTINGWLIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MIDDLE_TIER2_IP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  MIDDLE_TIER2_IP="MIDDLE_TIER2_IP=${HOST_IP}:${MIDDLE_TIER2_PORT}"
  sudo sed -i "$LINE_MATCH c \\$MIDDLE_TIER2_IP" $CFG_PATH
else
  trap "\"MIDDLE_TIER2_IP=\" string not found in .cfg file." EXIT
fi

### Middle-tier 2
CFG_PATH="./middle-tier2/.cfg"

LINE_MATCH=$(awk '/ASSERTINGWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  ASSERTINGWLIP="ASSERTINGWLIP=${HOST_IP}:${ASSERTING_PORT}"
  sudo sed -i "$LINE_MATCH c \\$ASSERTINGWLIP" $CFG_PATH
else
  trap "\"ASSERTINGWLIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MIDDLE_TIER3_IP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  MIDDLE_TIER3_IP="MIDDLE_TIER3_IP=${HOST_IP}:${MIDDLE_TIER3_PORT}"
  sudo sed -i "$LINE_MATCH c \\$MIDDLE_TIER3_IP" $CFG_PATH
else
  trap "\"MIDDLE_TIER3_IP=\" string not found in .cfg file." EXIT
fi

### Middle-tier 3
CFG_PATH="./middle-tier3/.cfg"

LINE_MATCH=$(awk '/ASSERTINGWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  ASSERTINGWLIP="ASSERTINGWLIP=${HOST_IP}:${ASSERTING_PORT}"
  sudo sed -i "$LINE_MATCH c \\$ASSERTINGWLIP" $CFG_PATH
else
  trap "\"ASSERTINGWLIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MIDDLE_TIER4_IP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  MIDDLE_TIER4_IP="MIDDLE_TIER4_IP=${HOST_IP}:${MIDDLE_TIER4_PORT}"
  sudo sed -i "$LINE_MATCH c \\$MIDDLE_TIER4_IP" $CFG_PATH
else
  trap "\"MIDDLE_TIER4_IP=\" string not found in .cfg file." EXIT
fi

### Middle-tier 4
CFG_PATH="./middle-tier4/.cfg"

LINE_MATCH=$(awk '/ASSERTINGWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  ASSERTINGWLIP="ASSERTINGWLIP=${HOST_IP}:${ASSERTING_PORT}"
  sudo sed -i "$LINE_MATCH c \\$ASSERTINGWLIP" $CFG_PATH
else
  trap "\"ASSERTINGWLIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MIDDLE_TIER5_IP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  MIDDLE_TIER5_IP="MIDDLE_TIER5_IP=${HOST_IP}:${MIDDLE_TIER5_PORT}"
  sudo sed -i "$LINE_MATCH c \\$MIDDLE_TIER5_IP" $CFG_PATH
else
  trap "\"MIDDLE_TIER5_IP=\" string not found in .cfg file." EXIT
fi

### Middle-tier 5
CFG_PATH="./middle-tier5/.cfg"

LINE_MATCH=$(awk '/ASSERTINGWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  ASSERTINGWLIP="ASSERTINGWLIP=${HOST_IP}:${ASSERTING_PORT}"
  sudo sed -i "$LINE_MATCH c \\$ASSERTINGWLIP" $CFG_PATH
else
  trap "\"ASSERTINGWLIP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/TARGETWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TARGETWLIP="TARGETWLIP=${HOST_IP}:${TARGET_PORT}"
  sudo sed -i "$LINE_MATCH c \\$TARGETWLIP" $CFG_PATH
else
  trap "\"TARGETWLIP=\" string not found in .cfg file." EXIT
fi
# /\Change .cfg file of Middle-Tier Workload

########################################

## \/Change .cfg file of Target Workload
CFG_PATH="./target_workload/.cfg"

LINE_MATCH=$(awk '/SOCKET_PATH=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="SOCKET_PATH=${SOCKET_PATH}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"SOCKET_PATH=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/PROOF_LEN=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="PROOF_LEN=${PROOF_LEN}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"PROOF_LEN=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/PEM_PATH=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="PEM_PATH=${PEM_PATH}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"PEM_PATH=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/MINT_ZKP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="MINT_ZKP=${MINT_ZKP}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"MINT_ZKP=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/TRUST_DOMAIN=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  TMP_VAR="TRUST_DOMAIN=${TRUST_DOMAIN}"
  sudo sed -i "$LINE_MATCH c \\$TMP_VAR" $CFG_PATH
else
  trap "\"TRUST_DOMAIN=\" string not found in .cfg file." EXIT
fi

LINE_MATCH=$(awk '/ASSERTINGWLIP=/{ print NR;}' $CFG_PATH)
if test $LINE_MATCH -gt 0; then
  ASSERTINGWLIP="ASSERTINGWLIP=${HOST_IP}:${ASSERTING_PORT}"
  sudo sed -i "$LINE_MATCH c \\$ASSERTINGWLIP" $CFG_PATH
else
  trap "\"ASSERTINGWLIP=\" string not found in .cfg file." EXIT
fi

## /\Change .cfg file of Target Workload

echo "Environment configured according to ./utils/.cfg"